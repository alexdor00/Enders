// ============================================
// üìä datos.js - FUENTE √öNICA DE DATOS
// ============================================
// 
// üéØ PROP√ìSITO:
// Este archivo contiene TODOS los datos de la aplicaci√≥n en arrays.
// Es la "base de datos" en memoria del proyecto.
// 
// üì¶ CONTENIDO:
// 1. usuarios ‚Üí Array con los usuarios que pueden hacer login
// 2. voluntariados ‚Üí Array con todas las ofertas y peticiones
// 3. obtenerNuevoId() ‚Üí Funci√≥n para calcular el siguiente ID
// 
// üîó C√ìMO SE USA EN OTROS ARCHIVOS:
// 
//   En dashboard.js:
//   import { voluntariados } from './datos.js';
//   ‚Üí Para mostrar todas las tarjetas en el dashboard
// 
//   En login.js:
//   import { usuarios } from './datos.js';
//   ‚Üí Para verificar si el usuario existe
// 
//   En voluntariados.js:
//   import { voluntariados, obtenerNuevoId } from './datos.js';
//   ‚Üí Para a√±adir/borrar voluntariados
// 
//   En usuarios.js:
//   import { usuarios, obtenerNuevoId } from './datos.js';
//   ‚Üí Para a√±adir/borrar usuarios
// 
// ‚ö†Ô∏è IMPORTANTE - NO HAY PERSISTENCIA:
// - Los datos est√°n en memoria (RAM)
// - Si a√±ades/borras algo, solo existe mientras est√©s en esa p√°gina
// - Si refrescas (F5) o cambias de p√°gina, vuelven los datos originales
// - En productos futuros a√±adiremos base de datos real
// 
// ============================================
// ‚≠ê PROMPTS DE IA GENERATIVA UTILIZADOS:
// ============================================
// 1. IA: Claude - Prompt: "Crea estructura de datos en JavaScript con arrays de objetos para usuarios con propiedades id, nombre, email y password, usando export para m√≥dulos ES6"
// 
// 2. IA: Claude - Prompt: "Necesito un array de voluntariados con objetos que tengan id, titulo, tipo (oferta o peticion), descripcion, fecha y usuario, exportado como m√≥dulo"
// 
// 3. IA: Claude - Prompt: "Funci√≥n JavaScript que calcule autom√°ticamente el siguiente ID disponible en un array de objetos, manejando arrays vac√≠os"
// 
// 4. IA: Claude - Prompt: "Sintaxis correcta de export const en JavaScript ES6 para exportar m√∫ltiples variables y funciones desde un m√≥dulo"
// ============================================

// ==========================================
// üë• USUARIOS DE LA APLICACI√ìN
// ==========================================
// Usuarios que pueden hacer login en la app
// Datos basados en el mockup AnimalCare.pdf (p√°gina 4)
export const usuarios = [
    {
        id: 1,
        nombre: "LAURA",
        email: "L@A.U",
        password: "123"
    },
    {
        id: 2,
        nombre: "MARCOS",
        email: "M@R.C",
        password: "123"
    },
    {
        id: 3,
        nombre: "SONIA",
        email: "S@O.N",
        password: "123"
    }
];

// ==========================================
// üêæ VOLUNTARIADOS (Ofertas y Peticiones)
// ==========================================
// Todas las ofertas y peticiones de voluntariado
// Datos extra√≠dos del mockup AnimalCare.pdf (p√°gina 1 y 3)
export const voluntariados = [
    {
        id: 1,
        titulo: "OFREZCO MEDICINA",
        tipo: "oferta",
        descripcion: "SUPLEMENTOS VITAM√çNICOS PARA ANIMALES ENFERMOS",
        fecha: "24/10/2025",
        usuario: "LAURA"
    },
    {
        id: 2,
        titulo: "NECESITO REFUGIO",
        tipo: "peticion",
        descripcion: "SE DAN EN ADOPCI√ìN 4 GATITOS",
        fecha: "27/10/2025",
        usuario: "MARCOS"
    },
    {
        id: 3,
        titulo: "NECESITO VEH√çCULO",
        tipo: "peticion",
        descripcion: "NECESITO UN VEH√çCULO PARA TRASLADAR UN CABALLO",
        fecha: "28/10/2025",
        usuario: "SONIA"
    }
];

// ==========================================
// üîß FUNCI√ìN AUXILIAR: Obtener nuevo ID
// ==========================================
// Calcula autom√°ticamente el siguiente ID disponible para un array
// Evita IDs duplicados y gestiona arrays vac√≠os
// 
// Par√°metros:
//   array - Array de objetos que contienen propiedad 'id'
// 
// Retorna:
//   N√∫mero - El siguiente ID disponible (m√°ximo actual + 1)
// 
// Ejemplo de uso:
//   const nuevoUsuario = {
//       id: obtenerNuevoId(usuarios),
//       nombre: "PEDRO",
//       email: "pedro@email.com",
//       password: "456"
//   };
//   usuarios.push(nuevoUsuario);
//
export function obtenerNuevoId(array) {
    // Si el array est√° vac√≠o, comenzar desde 1
    if (array.length === 0) return 1;
    
    // Obtener todos los IDs del array
    const ids = array.map(item => item.id);
    
    // Encontrar el ID m√°ximo y sumarle 1
    const maxId = Math.max(...ids);
    
    return maxId + 1;
}
/ Funci√≥n para a√±adir un nuevo usuario
// Utiliza obtenerNuevoId para asignar un ID √∫nico
export function agregarUsuario(nombre, email, password) {
    const nuevoUsuario = {
        id: obtenerNuevoId(usuarios), // <-- Usa la funci√≥n existente
        nombre: nombre.toUpperCase(),
        email: email,
        password: password 
    };
    usuarios.push(nuevoUsuario);
}

// Funci√≥n para eliminar un usuario por su ID
export function eliminarUsuario(id) {
    // Buscar la posici√≥n (√≠ndice) del usuario con ese ID
    const index = usuarios.findIndex(u => u.id === id);
    
    if (index !== -1) {
        usuarios.splice(index, 1); // Elimina 1 elemento en esa posici√≥n
        return true;
    }
    return false;
}
